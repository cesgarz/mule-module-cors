<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:cors="http://www.mulesoft.org/schema/mule/cors"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/cors http://www.mulesoft.org/schema/mule/cors/current/mule-cors.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <http:listener-config name="http-listener-config" host="localhost"  port="${http.port}"/>

    <http:request-config name="http-request-config" host="localhost" port="${http.port}"/>

    <cors:config name="defaultConfig">
        <cors:origins>
            <cors:origin url="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_TEST_ORIGIN}">
                <cors:methods>
                    <cors:method>GET</cors:method>
                    <cors:method>PUT</cors:method>
                </cors:methods>
                <cors:headers>
                    <cors:header>X-Allow-Origin</cors:header>
                </cors:headers>
            </cors:origin>
        </cors:origins>
    </cors:config>

    <cors:config name="withDefaultOrigin" storePrefix="withDefaultConfig">
        <cors:origins>
            <cors:origin url="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_TEST_ORIGIN}">
                <cors:methods>
                    <cors:method>POST</cors:method>
                </cors:methods>
                <cors:headers>
                    <cors:header>X-Allow-Origin</cors:header>
                </cors:headers>
            </cors:origin>
            <cors:origin url="*"> <!-- wildcard for defining the default config to all origins not previously matched -->
                <cors:methods>
                    <cors:method>GET</cors:method>
                    <cors:method>PUT</cors:method>
                </cors:methods>
                <cors:headers>
                    <cors:header>X-Allow-Origin</cors:header>
                </cors:headers>
            </cors:origin>
        </cors:origins>
    </cors:config>

    <cors:config name="headersConfig">
        <cors:origins>
            <cors:origin url="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_HEADERS_CONFIG_ORIGIN}">
                <cors:methods>
                    <cors:method>GET</cors:method>
                    <cors:method>PUT</cors:method>
                </cors:methods>
                <cors:headers>
                    <cors:header>Authorization</cors:header>
                    <cors:header>id</cors:header>
                </cors:headers>
            </cors:origin>
        </cors:origins>
    </cors:config>

    <cors:config name="exposeHeadersConfig">
        <cors:origins>
            <cors:origin url="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_DEFAULT_ORIGIN}">
                <cors:methods>
                    <cors:method>GET</cors:method>
                    <cors:method>PUT</cors:method>
                    <cors:method>POST</cors:method>
                </cors:methods>
                <cors:expose-headers>
                    <cors:expose-header>ETag</cors:expose-header>
                    <cors:expose-header>X-Custom-Header</cors:expose-header>
                </cors:expose-headers>
            </cors:origin>
        </cors:origins>
    </cors:config>

    <cors:config name="emptyConfig" storePrefix="emptyConfig" />

    <flow name="nonBlockingTestFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_CONFIGURED_ENDPOINT_PATH}"/>
        <cors:validate config-ref="defaultConfig"/>
        <!-- read the expected return from the test case for convenience -->
        <set-payload value="#{T(com.mulesoft.modules.cors.CORSModuleTest).EXPECTED_RETURN}" />
    </flow>

    <flow name="nonBlockingPublicFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_PUBLIC_ENDPOINT_PATH}"/>
        <cors:validate publicResource="true" config-ref="defaultConfig" />
        <!-- read the expected return from the test case for convenience -->
        <set-payload value="#{T(com.mulesoft.modules.cors.CORSModuleTest).EXPECTED_RETURN}" />
    </flow>

    <flow name="nonBlockingDefaultConfigFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_DEFAULT_ENDPOINT_PATH}"/>
        <cors:validate config-ref="withDefaultOrigin"/>
        <!-- read the expected return from the test case for convenience -->
        <set-payload value="#{T(com.mulesoft.modules.cors.CORSModuleTest).EXPECTED_RETURN}" />
    </flow>

    <flow name="nonBlockingHeadersFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_HEADERS_ENDPOINT_PATH}"/>
        <cors:validate publicResource="true" config-ref="defaultConfig" />
        <set-payload value="#{T(com.mulesoft.modules.cors.CORSModuleTest).EXPECTED_RETURN}" />
    </flow>

    <flow name="exposeHeadersFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_EXPOSE_HEADERS_ENDPOINT_PATH}"/>
        <cors:validate publicResource="false" config-ref="exposeHeadersConfig" />
        <set-payload value="#{T(com.mulesoft.modules.cors.CORSModuleTest).EXPECTED_RETURN}" />
    </flow>

    <flow name="nonBlockingRequestHeadersFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_REQUEST_HEADERS_ENDPOINT_PATH}"/>
        <cors:validate publicResource="false" config-ref="headersConfig" />
        <set-payload value="#{T(com.mulesoft.modules.cors.CORSModuleTest).EXPECTED_RETURN}" />
    </flow>

    <flow name="emptyConfigFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_PUBLIC_EMPTY_ENDPOINT_PATH}"/>
        <cors:validate publicResource="true" config-ref="emptyConfig" />
        <!-- read the expected return from the test case for convenience -->
        <set-payload value="#{T(com.mulesoft.modules.cors.CORSModuleTest).EXPECTED_RETURN}" />
    </flow>

    <flow name="mainFlow">
        <http:listener config-ref="http-listener-config"  path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_MAIN_FLOW_ENDPOINT_PATH}" />
        <cors:validate config-ref="withDefaultOrigin"/>
        <flow-ref name="exceptionFlowRef"/>
    </flow>

    <flow name="internalFlow">
        <http:listener config-ref="http-listener-config" path="/internal" />
        <set-payload value="something"/>
    </flow>

    <flow name="exceptionFlowRef">
        <!-- call dummy flow -->
        <http:request config-ref="http-request-config" path="/internal" method="GET">
            <!-- force failure -->
            <http:success-status-code-validator values="400"/>
        </http:request>
    </flow>

    <flow name="nonBlockingExceptionConfigFlow">
        <http:listener config-ref="http-listener-config" path="#{T(com.mulesoft.modules.cors.CORSModuleTest).CORS_EXCEPTION_ENDPOINT_PATH}"/>
        <cors:validate config-ref="withDefaultOrigin"/>
        <!-- throw Exception -->
        <scripting:component>
            <scripting:script engine="Groovy"><![CDATA[
                throw new IllegalArgumentException('bad arg')]]></scripting:script>
        </scripting:component>
    </flow>

</mule>
